#version 450 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#define GET_CMD_PATH_INDEX(value) (value >> 16)

struct BoundingBox
{
	vec4 minmax;
};

struct Path
{
	uint startCmdIndex;
	uint endCmdIndex;
	uint startTileIndex;
	uint endTileIndex;
	mat4 transform;
	BoundingBox bbox;
	uint color;
	uint startVisibleTileIndex;
	uint endVisibleTileIndex;
	uint startSpanQuadIndex;
	uint startTileQuadIndex;
	uint _pad0;
	uint _pad1;
	uint _pad2;
};

struct Command
{
	uint pathIndexCmdType; // 16 bits pathIndex, 8 bits curve type, 8 bits unused, GET_CMD_PATH_INDEX, GET_CMD_TYPE, MAKE_CMD_PATH_INDEX, MAKE_CMD_TYPE
	uint startIndexSimpleCommands;
	uint endIndexSimpleCommands;
	uint _pad0;
	vec2 points[4]; // Maybe unused, but maximum 3 points for cubicTo
	vec2 transformedPoints[4]; // Maybe unused, but maximum 3 points for cubicTo
};

layout(location = 0) uniform mat4 u_GlobalTransform;

layout(std430, binding = 0) buffer Paths
{
	Path paths[];
};

layout(std430, binding = 1) buffer Commands
{
	Command commands[];
};

void main()
{
	uint index = gl_GlobalInvocationID.y * gl_NumWorkGroups.x + gl_GlobalInvocationID.x;
	if (index >= commands.length())
	{
		return;
	}

	uint pathIndex = GET_CMD_PATH_INDEX(commands[index].pathIndexCmdType);

	vec2 p1 = commands[index].points[0];
	vec2 p2 = commands[index].points[1];
	vec2 p3 = commands[index].points[2];

	mat4 trans = u_GlobalTransform * paths[pathIndex].transform;

	vec2 v1 = (trans * vec4(p1, 1.0, 1.0)).xy;
	vec2 v2 = (trans * vec4(p2, 1.0, 1.0)).xy;
	vec2 v3 = (trans * vec4(p3, 1.0, 1.0)).xy;

	commands[index].transformedPoints[0][0] = v1.x;
	commands[index].transformedPoints[0][1] = v1.y;
	commands[index].transformedPoints[1][0] = v2.x;
	commands[index].transformedPoints[1][1] = v2.y;
	commands[index].transformedPoints[2][0] = v3.x;
	commands[index].transformedPoints[2][1] = v3.y;
}