#version 460 core

#define WG_SIZE 1
layout(local_size_x = WG_SIZE, local_size_y = 1, local_size_z = 1) in;

#define MOVE_TO 0
#define LINE_TO 1
#define QUAD_TO 2
#define CUBIC_TO 3

#define GET_CMD_PATH_INDEX(value) (value >> 8)
#define GET_CMD_TYPE(value) (value & 0x000000FF)
#define MAKE_CMD_PATH_INDEX(value, index) ((index << 8) | (value & 0x000000FF))
#define MAKE_CMD_TYPE(value, type) (type | (value & 0xFFFFFF00))

const float TOLERANCE = 0.05f; // Quality of flattening
const uint TILE_SIZE = 16;
const uint ATLAS_SIZE = 4096 * 2;

const uint MAX_UINT = 4294967295;
const float MAX_FLOAT = 3.40282347e+38F;

struct BoundingBox
{
	vec4 minmax;
};

struct Path
{
	uint startCmdIndex;
	uint endCmdIndex;
	uint startTileIndex;
	uint endTileIndex;
	mat4 transform;
	BoundingBox bbox;
	uint color;
	uint startVisibleTileIndex;
	uint startSpanQuadIndex;
	uint startTileQuadIndex;
	bool isBboxVisible;
	uint _pad0;
	uint _pad1;
	uint _pad2;
};

struct Command
{
	uint pathIndexCmdType; // 16 bits pathIndex, 8 bits curve type, 8 bits unused, GET_CMD_PATH_INDEX, GET_CMD_TYPE, MAKE_CMD_PATH_INDEX, MAKE_CMD_TYPE
	uint startIndexSimpleCommands;
	uint endIndexSimpleCommands;
	uint _pad0;
	vec2 points[4]; // Maybe unused, but maximum 3 points for cubicTo
	vec2 transformedPoints[4]; // Maybe unused, but maximum 3 points for cubicTo
};

struct SimpleCommand // Lines or moves only
{
	uint type;
	uint cmdIndex;
	vec2 point;
};

struct Increment
{
	int area;
	int height;
};

struct Tile
{
	int winding;
	uint nextTileIndex;
	bool hasIncrements;
	Increment[TILE_SIZE * TILE_SIZE] increments;
};

struct Vertex
{
	int pos[2];
	uint uv[2];
	uint color;
};

layout(std140, binding = 0) uniform Params
{
	mat4 globalTransform;
	uint screenWidth;
	uint screenHeight;
};

layout(std430, binding = 1) buffer Paths
{
	Path paths[];
};

layout(std430, binding = 2) buffer Commands
{
	Command commands[];
};

layout(std430, binding = 3) buffer SimpleCommands
{
	SimpleCommand simpleCommands[];
};

layout(std430, binding = 4) buffer Tiles
{
	Tile tiles[];
};

layout(std430, binding = 5) buffer Vertices
{
	Vertex vertices[];
};

layout(std430, binding = 6) buffer Atlas
{
	float atlas[];
};

layout(std430, binding = 7) buffer Helpers
{
	uint atomicPreFlattenCounter;
	uint atomicPreFillCounter;
	uint renderIndicesCount;
};

void main()
{
	uint pathIndex = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;
	if (pathIndex < paths.length())
	{
		Path path = paths[pathIndex];
		if (!path.isBboxVisible)
		{
			return;
		}

		// TODO: We are not interested in tiles, where x-coord of the tile is above SCREEN_WIDTH, or y-coord is above SCREEN_HEIGHT
		const int minBboxCoordX = int(floor(path.bbox.minmax.x));
		const int minBboxCoordY = int(floor(path.bbox.minmax.y));
		const int maxBboxCoordX = int(ceil(path.bbox.minmax.z));
		const int maxBboxCoordY = int(ceil(path.bbox.minmax.w));

		const int minTileCoordX = int(floor(float(minBboxCoordX) / TILE_SIZE));
		const int minTileCoordY = int(floor(float(minBboxCoordY) / TILE_SIZE));
		const int maxTileCoordX = int(ceil(float(maxBboxCoordX) / TILE_SIZE));
		const int maxTileCoordY = int(ceil(float(maxBboxCoordY) / TILE_SIZE));

		int tileStartX = minTileCoordX;
		int tileStartY = minTileCoordY;
		uint tileCountX = maxTileCoordX - minTileCoordX + 1;
		uint tileCountY = maxTileCoordY - minTileCoordY + 1;

		const uint count = tileCountX * tileCountY;

		uint prevCount = atomicAdd(atomicPreFillCounter, count);
		path.startTileIndex = prevCount;
		path.endTileIndex = prevCount + count - 1;
		paths[pathIndex] = path;
	}
}